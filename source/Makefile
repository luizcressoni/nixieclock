#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#


WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres

INC =
CFLAGS = -Wall -Wformat-overflow=0 -I/usr/local/include/opencv4
RESINC =
LIBDIR =
#LIB = -lpthread -ltinyxml2 -lpigpio -L/usr/local/lib -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_photo -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dpm -lopencv_face -lopencv_fuzzy -lopencv_img_hash -lopencv_line_descriptor -lopencv_optflow -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_stereo -lopencv_structured_light -lopencv_phase_unwrapping -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_ml -lopencv_xfeatures2d -lopencv_shape -lopencv_video -lopencv_ximgproc -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_flann -lopencv_xobjdetect -lopencv_imgcodecs -lopencv_objdetect -lopencv_xphoto -lopencv_imgproc -lopencv_core
LIB = -lpthread -ltinyxml2 -lpigpio -L/usr/local/lib -lopencv_videoio -lopencv_imgcodecs -lopencv_objdetect -lopencv_imgproc -lopencv_core
LDFLAGS =


INC_DEBUG = $(INC)
CFLAGS_DEBUG = $(CFLAGS) -ansi -pg -g -DPC
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS) -pg
OBJDIR_DEBUG = obj/Debug
DEP_DEBUG =
OUT_DEBUG = ./nixie_dbg

INC_RELEASE = $(INC)
CFLAGS_RELEASE = $(CFLAGS) -O2
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS) -s
OBJDIR_RELEASE = obj/Release
DEP_RELEASE =
OUT_RELEASE = ./nixie

OBJ_DEBUG = $(OBJDIR_DEBUG)/ramp.o $(OBJDIR_DEBUG)/nixie_clock.o $(OBJDIR_DEBUG)/numbers.o $(OBJDIR_DEBUG)/proc.o $(OBJDIR_DEBUG)/pwm.o $(OBJDIR_DEBUG)/rgb.o $(OBJDIR_DEBUG)/rtc.o $(OBJDIR_DEBUG)/sinusoidal.o $(OBJDIR_DEBUG)/weather.o $(OBJDIR_DEBUG)/gpio.o $(OBJDIR_DEBUG)/ctimer.o $(OBJDIR_DEBUG)/face_detection.o $(OBJDIR_DEBUG)/flash.o $(OBJDIR_DEBUG)/functions.o $(OBJDIR_DEBUG)/clientsocket.o $(OBJDIR_DEBUG)/i2c.o $(OBJDIR_DEBUG)/main.o $(OBJDIR_DEBUG)/mmap.o $(OBJDIR_DEBUG)/modulation.o

OBJ_RELEASE = $(OBJDIR_RELEASE)/ramp.o $(OBJDIR_RELEASE)/nixie_clock.o $(OBJDIR_RELEASE)/numbers.o $(OBJDIR_RELEASE)/proc.o $(OBJDIR_RELEASE)/pwm.o $(OBJDIR_RELEASE)/rgb.o $(OBJDIR_RELEASE)/rtc.o $(OBJDIR_RELEASE)/sinusoidal.o $(OBJDIR_RELEASE)/weather.o $(OBJDIR_RELEASE)/gpio.o $(OBJDIR_RELEASE)/ctimer.o $(OBJDIR_RELEASE)/face_detection.o $(OBJDIR_RELEASE)/flash.o $(OBJDIR_RELEASE)/functions.o $(OBJDIR_RELEASE)/clientsocket.o $(OBJDIR_RELEASE)/i2c.o $(OBJDIR_RELEASE)/main.o $(OBJDIR_RELEASE)/mmap.o $(OBJDIR_RELEASE)/modulation.o

all: debug release

clean: clean_debug clean_release

before_debug:
	test -d . || mkdir -p .
	test -d $(OBJDIR_DEBUG) || mkdir -p $(OBJDIR_DEBUG)

after_debug:

debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	$(LD) $(LIBDIR_DEBUG) -o $(OUT_DEBUG) $(OBJ_DEBUG)  $(LDFLAGS_DEBUG) $(LIB_DEBUG)

$(OBJDIR_DEBUG)/ramp.o: ramp.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c ramp.cpp -o $(OBJDIR_DEBUG)/ramp.o

$(OBJDIR_DEBUG)/nixie_clock.o: nixie_clock.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c nixie_clock.cpp -o $(OBJDIR_DEBUG)/nixie_clock.o

$(OBJDIR_DEBUG)/numbers.o: numbers.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c numbers.cpp -o $(OBJDIR_DEBUG)/numbers.o

$(OBJDIR_DEBUG)/proc.o: proc.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c proc.cpp -o $(OBJDIR_DEBUG)/proc.o

$(OBJDIR_DEBUG)/pwm.o: pwm.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c pwm.cpp -o $(OBJDIR_DEBUG)/pwm.o

$(OBJDIR_DEBUG)/rgb.o: rgb.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c rgb.cpp -o $(OBJDIR_DEBUG)/rgb.o

$(OBJDIR_DEBUG)/rtc.o: rtc.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c rtc.cpp -o $(OBJDIR_DEBUG)/rtc.o

$(OBJDIR_DEBUG)/sinusoidal.o: sinusoidal.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c sinusoidal.cpp -o $(OBJDIR_DEBUG)/sinusoidal.o

$(OBJDIR_DEBUG)/weather.o: weather.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c weather.cpp -o $(OBJDIR_DEBUG)/weather.o

$(OBJDIR_DEBUG)/gpio.o: gpio.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c gpio.cpp -o $(OBJDIR_DEBUG)/gpio.o

$(OBJDIR_DEBUG)/ctimer.o: ctimer.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c ctimer.cpp -o $(OBJDIR_DEBUG)/ctimer.o

$(OBJDIR_DEBUG)/face_detection.o: face_detection.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c face_detection.cpp -o $(OBJDIR_DEBUG)/face_detection.o

$(OBJDIR_DEBUG)/flash.o: flash.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c flash.cpp -o $(OBJDIR_DEBUG)/flash.o

$(OBJDIR_DEBUG)/functions.o: functions.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c functions.cpp -o $(OBJDIR_DEBUG)/functions.o

$(OBJDIR_DEBUG)/clientsocket.o: clientsocket.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c clientsocket.cpp -o $(OBJDIR_DEBUG)/clientsocket.o

$(OBJDIR_DEBUG)/i2c.o: i2c.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c i2c.cpp -o $(OBJDIR_DEBUG)/i2c.o

$(OBJDIR_DEBUG)/main.o: main.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c main.cpp -o $(OBJDIR_DEBUG)/main.o

$(OBJDIR_DEBUG)/mmap.o: mmap.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c mmap.cpp -o $(OBJDIR_DEBUG)/mmap.o

$(OBJDIR_DEBUG)/modulation.o: modulation.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c modulation.cpp -o $(OBJDIR_DEBUG)/modulation.o

clean_debug:
	rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	rm -rf $(OBJDIR_DEBUG)

before_release:
	test -d . || mkdir -p .
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)

after_release:

release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) $(LIBDIR_RELEASE) -o $(OUT_RELEASE) $(OBJ_RELEASE)  $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/ramp.o: ramp.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c ramp.cpp -o $(OBJDIR_RELEASE)/ramp.o

$(OBJDIR_RELEASE)/nixie_clock.o: nixie_clock.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c nixie_clock.cpp -o $(OBJDIR_RELEASE)/nixie_clock.o

$(OBJDIR_RELEASE)/numbers.o: numbers.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c numbers.cpp -o $(OBJDIR_RELEASE)/numbers.o

$(OBJDIR_RELEASE)/proc.o: proc.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c proc.cpp -o $(OBJDIR_RELEASE)/proc.o

$(OBJDIR_RELEASE)/pwm.o: pwm.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c pwm.cpp -o $(OBJDIR_RELEASE)/pwm.o

$(OBJDIR_RELEASE)/rgb.o: rgb.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c rgb.cpp -o $(OBJDIR_RELEASE)/rgb.o

$(OBJDIR_RELEASE)/rtc.o: rtc.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c rtc.cpp -o $(OBJDIR_RELEASE)/rtc.o

$(OBJDIR_RELEASE)/sinusoidal.o: sinusoidal.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c sinusoidal.cpp -o $(OBJDIR_RELEASE)/sinusoidal.o

$(OBJDIR_RELEASE)/weather.o: weather.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c weather.cpp -o $(OBJDIR_RELEASE)/weather.o

$(OBJDIR_RELEASE)/gpio.o: gpio.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c gpio.cpp -o $(OBJDIR_RELEASE)/gpio.o

$(OBJDIR_RELEASE)/ctimer.o: ctimer.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c ctimer.cpp -o $(OBJDIR_RELEASE)/ctimer.o

$(OBJDIR_RELEASE)/face_detection.o: face_detection.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c face_detection.cpp -o $(OBJDIR_RELEASE)/face_detection.o

$(OBJDIR_RELEASE)/flash.o: flash.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c flash.cpp -o $(OBJDIR_RELEASE)/flash.o

$(OBJDIR_RELEASE)/functions.o: functions.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c functions.cpp -o $(OBJDIR_RELEASE)/functions.o

$(OBJDIR_RELEASE)/clientsocket.o: clientsocket.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c clientsocket.cpp -o $(OBJDIR_RELEASE)/clientsocket.o

$(OBJDIR_RELEASE)/i2c.o: i2c.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c i2c.cpp -o $(OBJDIR_RELEASE)/i2c.o

$(OBJDIR_RELEASE)/main.o: main.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c main.cpp -o $(OBJDIR_RELEASE)/main.o

$(OBJDIR_RELEASE)/mmap.o: mmap.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c mmap.cpp -o $(OBJDIR_RELEASE)/mmap.o

$(OBJDIR_RELEASE)/modulation.o: modulation.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c modulation.cpp -o $(OBJDIR_RELEASE)/modulation.o

clean_release:
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	rm -rf $(OBJDIR_RELEASE)

.PHONY: before_debug after_debug clean_debug before_release after_release clean_release

